#–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio #–∞—Å–∏–Ω—Ö—Ä–æ–Ω–æ—Å—Ç—å
import logging #–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import datetime
from datetime import timedelta  #—Ä–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
import random
#—Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
import custom_answer


#aiogram –∏ –≤—Å—ë —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
#–∫–æ–Ω—Ñ–∏–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
import config
#—Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from database import dbworker


#–∑–∞–¥–∞—ë–º –ª–æ–≥–∏
logging.basicConfig(level=logging.INFO)

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.bot_token)
dp = Dispatcher(bot,storage=MemoryStorage())

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = dbworker('db.db')

#–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
button_close = KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå')

close_btn = ReplyKeyboardMarkup(one_time_keyboard=True)

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'],state='*')
async def start(message : types.Message):
	#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é
	button_search = KeyboardButton('–ù–∞–π—Ç–∏ —Ö–∞—Ç—Éüîç')
	button_create_hata = KeyboardButton('–°–æ–∑–¥–∞—Ç—å —Ö–∞—Ç—Éüè†')
	button_delete_hata = KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ö–∞—Ç—É‚ùå')

	all_btn = ReplyKeyboardMarkup(one_time_keyboard=True)

	if db.hata_exists(message.from_user.id):

		all_btn.add(button_search,button_create_hata,button_delete_hata)
	else:
		all_btn.add(button_search,button_create_hata)

	await message.answer('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∏—â—É —Ö–∞—Ç—É –±–æ—Ç –∏ —Ç—É—Ç —Ç—ã –ª–µ–≥–∫–æ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —É–±–µ–∂–∏—â–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –∏–ª–∏ —Ç–∞–∫–∂–µ —Ä–∞–∑—ã—Å–∫–∞—Ç—å –æ–¥–Ω–æ–±—É—Ç—ã–ª—å—Ü–µ–≤ –¥–ª—è –≤–ø–∏—Å–æ–Ω–∞üçæ\n',reply_markup=all_btn)
	if(not db.user_exists(message.from_user.id)):
		#–µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		db.add_user(message.from_user.username,message.from_user.id,message.from_user.full_name)


#–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–∞—Ç—ã


class CreateHata(StatesGroup):
    name = State()
    description = State()
    data = State()
    city = State()
    photo = State()
    social_link = State()
@dp.message_handler(lambda message: message.text.startswith('–°–æ–∑–¥–∞—Ç—å —Ö–∞—Ç—Éüè†'),state='*')
async def create_hata(message: types.Message):
	if message.from_user.username != None:
		if(not db.hata_exists(message.from_user.id)):
			await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å —Ö–∞—Ç—É –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä–µ–ø —Ö–∞—É—Å–∞üòâ")
			await CreateHata.name.set()
		elif(db.hata_exists(message.from_user.id)) :
			await message.answer('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ö–∞—Ç–∞!')
	else:
		await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -> Edit Profile(–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å) –∏ –∂–º—è–∫–∞–π—Ç–µ add username\n\n–¢–∞–º –≤–≤–æ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –∏ –≤—É–∞–ª—è')
@dp.message_handler(state=CreateHata.name)
async def create_hata_name(message: types.Message, state: FSMContext):
	if len(message.text) < 35: 
		await state.update_data(hata_name=message.text)
		await message.reply(message.text + ' - –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µüëá\n–±–µ–∑ —ç—Ç–æ–≥–æ –Ω–∏–∫–∞–∫ –ø—Ä–æ—Å—Ç–∏ :9')
		await CreateHata.next()
	else:
		await message.answer(custom_answer.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return
@dp.message_handler(state=CreateHata.description)
async def create_hata_description(message: types.Message, state: FSMContext):
	if len(message.text) < 250:
		await state.update_data(hata_description=message.text)

		button_to_day = KeyboardButton('–°–µ–≥–æ–¥–Ω—è')
		button_tomorrow = KeyboardButton('–ó–∞–≤—Ç—Ä–∞')
		button_after_tomorrow = KeyboardButton('–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞')

		all_btn_days = ReplyKeyboardMarkup(one_time_keyboard=True)
		all_btn_days.add(button_to_day,button_tomorrow,button_after_tomorrow)
		await message.reply('–ï–±–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ,–ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –ø—Ä–æ–π–¥—è—Ç —Ç–≤–æ—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ —Å –±–∞—Å—Å–µ–∏–Ω–æ–º(–∏–ª–∏ –±–µ–∑:) –∏ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞ –º—É—á–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É',reply_markup=all_btn_days)
		await CreateHata.next()
	else:
		await message.answer(custom_answer.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return
@dp.message_handler(state=CreateHata.data)
async def create_hata_data(message: types.Message, state: FSMContext):
	if message.text == '–°–µ–≥–æ–¥–Ω—è' or message.text == '–ó–∞–≤—Ç—Ä–∞' or message.text == '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞':
		if message.text == '–°–µ–≥–æ–¥–Ω—è':
			await state.update_data(hata_data=datetime.date.today())
		elif message.text == '–ó–∞–≤—Ç—Ä–∞':
			await state.update_data(hata_data=datetime.date.today() + timedelta(days=1))
		elif message.text == '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞':
			await state.update_data(hata_data=datetime.date.today() + timedelta(days=2))

		await message.reply('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ,–æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –ø–æ–Ω—è—Ç—å –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–≤–æ—ë —á—É–¥–Ω–æ–µ –º–µ—Å—Ç–æ\n–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–≤–æ–π –í–ø–∏—Å–∫–∞ –•–∞—É—Å =)')
		await CreateHata.next()
	else:
		await message.answer(custom_answer.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return
@dp.message_handler(state=CreateHata.city)
async def create_hata_city(message: types.Message, state: FSMContext):
	#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –≥–æ—Ä–æ–¥–∞
	if len(message.text) < 35:
		#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é 

		button_search = KeyboardButton('–í—Å–µ —Ö–∞—Ç—ãüîç')
		button_create_hata = KeyboardButton('–°–æ–∑–¥–∞—Ç—å —Ö–∞—Ç—Éüè†')
		button_delete_hata = KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ö–∞—Ç—É‚ùå')

		all_btn_menu = ReplyKeyboardMarkup(one_time_keyboard=True)

		user_name = message.from_user.username
		await state.update_data(hata_city=message.text.lower())
		user_data = await state.get_data()
		await message.answer('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',reply_markup=all_btn_menu)
		#–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –±–¥
		db.create_hata(message.from_user.id,str(user_data['hata_description']),str(user_data['hata_name']),str(user_data['hata_data']),str(user_data['hata_city']),user_name,datetime.date.today())
		#–∫–æ–Ω–µ—Ü state –ª–∏–Ω–∏–∏
		await state.finish()
	else:
		await message.answer(custom_answer.random_reapeat_list)
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return

#–£–¥–∞–ª–µ–Ω–∏–µ —Ö–∞—Ç—ã
@dp.message_handler(lambda message : message.text == '–£–¥–∞–ª–∏—Ç—å —Ö–∞—Ç—É‚ùå',state='*')
async def delete_hata(message: types.Message):
	#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é
	button_search = KeyboardButton('–ù–∞–π—Ç–∏ —Ö–∞—Ç—Éüîç')
	button_create_hata = KeyboardButton('–°–æ–∑–¥–∞—Ç—å —Ö–∞—Ç—Éüè†')
	button_delete_hata = KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ö–∞—Ç—É‚ùå')

	all_btn_menu = ReplyKeyboardMarkup(one_time_keyboard=True)

	if db.hata_exists(message.from_user.id):
		db.delete_hata(message.from_user.id)
		await message.answer('–í–∞—à–∞ —Ö–∞—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!',reply_markup=all_btn_menu  )
	else:
		await message.answer('–£ —Ç–µ–±—è –∏ —Ç–∞–∫ –µ—ë –Ω–µ—Ç :(\n(—Ö—ã-—Ö—ã)')

#—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ö–∞—Ç—ã
class SearchHata(StatesGroup):
	city_for_search = State()
@dp.message_handler(lambda message : message.text == '–ù–∞–π—Ç–∏ —Ö–∞—Ç—Éüîç',state='*')
async def search_hata(message: types.Message):
	await message.answer('–î–ª—è –ø–æ–∏—Å–∫–∞ —Ö–∞—Ç—ã –≤–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ç—Ä–µ–ø–∏—Ç—å)')
	await SearchHata.city_for_search.set()
class ID_hata(StatesGroup):
	id = State()
@dp.message_handler(state=SearchHata.city_for_search)
async def create_hata_city(message: types.Message, state: FSMContext):
	#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –≥–æ—Ä–æ–¥–∞
	if len(message.text) < 35:
		try:
			await state.update_data(search_hata_city=message.text.lower())
			user_data = await state.get_data()
			if bool(len(db.search_hata(user_data['search_hata_city'],'hata_id'))):
				all_hata_in_city_final = ''

				for i in range(0,db.count_hata(str(user_data['search_hata_city']))):
					all_hata_in_city_id = str(db.search_hata(str(user_data['search_hata_city']),'hata_id')[i][0])
					all_hata_in_city_name = str(db.search_hata(str(user_data['search_hata_city']),'name_hata')[i][0])
					all_hata_in_city_descp = str(db.search_hata(str(user_data['search_hata_city']),'description')[i][0])
					all_hata_in_city_data = str(db.search_hata(str(user_data['search_hata_city']),'data_fr_delete')[i][0])
					if all_hata_in_city_data == str(datetime.date.today()):
						all_hata_in_city_data = '–°–µ–≥–æ–¥–Ω—è'
					elif all_hata_in_city_data == str(datetime.date.today() + timedelta(days=1)):
						all_hata_in_city_data = '–ó–∞–≤—Ç—Ä–∞'
					elif all_hata_in_city_data == str(datetime.date.today() + timedelta(days=2)):
						all_hata_in_city_data  = '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞'
					all_hata_in_city_final = all_hata_in_city_final + '–ê–π–¥–∏—à–Ω–∏–∫ - ' + all_hata_in_city_id + '\n–ù–∞–∑–≤–∞–Ω–∏–µ - ' + all_hata_in_city_name + '\n–û–ø–∏—Å–∞–Ω–∏–µ - ' + all_hata_in_city_descp + '\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è - ' + all_hata_in_city_data + '\n#-#-#-#-#-#-#-#-#-#-#-#\n'
				
				#–∫–Ω–æ–ø–∫–∏
				button_funny_alert = KeyboardButton('–î–∞,–¥–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä—è–º —Ç—É—Ç‚òùÔ∏è')

				all_btn = ReplyKeyboardMarkup()
				all_btn.add(button_funny_alert)					

				await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤—ã–±—Ä–∞—Ç—å –∂–µ–ª–∞–µ–º—É—é - –≤–ø–∏—à–∏ ID.\n–í—Å–µ —Ç—É—Å—ã –≤ –≥–æ—Ä–æ–¥–µ ' + str(user_data['search_hata_city']).title() + ':\n\n' + all_hata_in_city_final,reply_markup=all_btn)
				#–∫–æ–Ω–µ—Ü state –ª–∏–Ω–∏–∏
				await state.finish()
				await ID_hata.id.set()
			else:
				await message.answer('–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ —Ç—É—Å!')
		except:
			await message.answer('–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç—É —Ö–∞—Ç –∏–ª–∏ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É!')
	else:
		await message.answer(custom_answer.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return
#–•–µ–¥–ª–µ—Ä –¥–ª—è —Ñ–∏
@dp.message_handler(state=ID_hata.id)
async def hata_search_id_send(message: types.Message, state: FSMContext):
	await state.update_data(hata_id_for_search=message.text)
	user_data = await state.get_data()
	try:
		if int(user_data['hata_id_for_search']) in range(1,99999):
			try:	
				search_id_request = db.search_hata_id(str(user_data['hata_id_for_search']))[0]
			except:
				search_id_request = '–Ω–µ—Ç—É('
			await message.answer('–ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è ;)\n–°–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å,–¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ—Å—å,–≤–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µüçª\n–ß–µ–≥–æ —Ç—ã –∂–¥—ë—à—å - @' + str(search_id_request))
			await bot.send_message(db.search_hata_tg_id(str(user_data['hata_id_for_search']))[0],'–¢–≤–æ–µ–π —Ö–∞—Ç–æ–π –∑–∞–∏–Ω—Ç–µ—Ä–∞–≤–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @' + str(message.from_user.username))
			return 
			await state.finish()	
	except Exception as e:
		await message.answer(custom_answer.random_reapeat_list())
		print(e)
		return
#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ö–∞—Ç
async def hata_timer(wait_for):
	while True:
		await asyncio.sleep(wait_for)
		now = datetime.date.today()

		db.delete_hata_timer(str(now - timedelta(days=1)))
#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–æ—Ñ–ª–∞)		
@dp.message_handler(lambda message : message.text == '–î–∞,–¥–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä—è–º —Ç—É—Ç‚òùÔ∏è',state='*')
async def funny_alert(message : types.Message):
	funny_list = ['–î–∞ –Ω–µ —Å—é–¥–∞ —Ç—ã–∫–∞—Ç—å, –∞ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç!üò°','–¢—ã —á—ë —Å–æ–≤—Å–µ–º *#*#43*~* –ø–∏—Å–∞—Ç—å –≤–≤–µ—Ä—Ö—É','–í —á–∞—Ç –ø–∏—à–∏ –±–ª–∏–Ω,–±—É–∫–æ–≤–∫–∞–º–∏ –≤–≤–µ—Ä—Ö—É!!!']
	await message.answer(random.choice(funny_list))

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–º –∑–∞–ø—Ä–æ—Å–µ —é–∑–µ—Ä–∞
@dp.message_handler()
async def end(message : types.Message):
	await message.answer('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å üò≤\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /help =)',parse_mode=ParseMode.MARKDOWN)

#–∑–∞–ø—É—Å–∫ –ø–æ–ª–∏–Ω–≥–∞ –±–æ—Ç–∞
dp.loop.create_task(hata_timer(600))	
executor.start_polling(dp, skip_updates=True)
