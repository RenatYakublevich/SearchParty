#–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio #–∞—Å–∏–Ω—Ö—Ä–æ–Ω–æ—Å—Ç—å
import logging #–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import datetime #—Ä–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º


#aiogram –∏ –≤—Å—ë —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
#–∫–æ–Ω—Ñ–∏–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
import config
#—Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from database import dbworker
#–∑–∞–¥–∞—ë–º –ª–æ–≥–∏
logging.basicConfig(level=logging.INFO)

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.bot_token)
dp = Dispatcher(bot,storage=MemoryStorage())

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = dbworker('db.db')

#–∫–Ω–æ–ø–∫–∏
button_search = KeyboardButton('–ù–∞–π—Ç–∏ —Ö–∞—Ç—Éüîç')
button_create_hata = KeyboardButton('–°–æ–∑–¥–∞—Ç—å —Ö–∞—Ç—Éüè†')
button_delete_hata = KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ö–∞—Ç—É‚ùå')

all_btn = ReplyKeyboardMarkup()
all_btn.add(button_search,button_create_hata,button_delete_hata)

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message : types.Message):
	await message.answer('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∏—â—É —Ö–∞—Ç—É –±–æ—Ç –∏ —Ç—É—Ç —Ç—ã –ª–µ–≥–∫–æ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —É–±–µ–∂–∏—â–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –∏–ª–∏ —Ç–∞–∫–∂–µ —Ä–∞–∑—ã—Å–∫–∞—Ç—å –æ–¥–Ω–æ–±—É—Ç—ã–ª—å—Ü–µ–≤ –¥–ª—è –≤–ø–∏—Å–æ–Ω–∞üçæ\n',reply_markup=all_btn)
	if(not db.subscriber_exists(message.from_user.id)):
		#–µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		db.add_subscriber(message.from_user.id)
#–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–∞—Ç—ã
class CreateHata(StatesGroup):
    name = State()
    description = State()
    data = State()
    city = State()
    photo = State()
@dp.message_handler(lambda message: message.text.startswith('–°–æ–∑–¥–∞—Ç—å —Ö–∞—Ç—Éüè†'))
async def create_hata(message: types.Message):
	if(not db.hata_exists(message.from_user.id)):
		await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å —Ö–∞—Ç—É –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä–µ–ø —Ö–∞—É—Å–∞üòâ")
		await CreateHata.name.set()
	elif(db.subscriber_exists(message.from_user.id)) :
		await message.answer('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ö–∞—Ç–∞!')
@dp.message_handler(state=CreateHata.name)
async def create_hata_name(message: types.Message, state: FSMContext):
	if len(message.text) < 35: 
		await state.update_data(hata_name=message.text)
		await message.reply(message.text + ' - –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µüëá\n–±–µ–∑ —ç—Ç–æ–≥–æ –Ω–∏–∫–∞–∫ –ø—Ä–æ—Å—Ç–∏ :9')
		await CreateHata.next()
	else:
		await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑!')
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return
@dp.message_handler(state=CreateHata.description)
async def create_hata_description(message: types.Message, state: FSMContext):
	if len(message.text) < 250:
		await state.update_data(hata_description=message.text)
		now = datetime.datetime.now()
		button_to_day = KeyboardButton('–°–µ–≥–æ–¥–Ω—è')
		button_tomorrow = KeyboardButton('–ó–∞–≤—Ç—Ä–∞')
		button_after_tomorrow = KeyboardButton('–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞')

		all_btn = ReplyKeyboardMarkup()
		all_btn.add(button_to_day,button_tomorrow,button_after_tomorrow)
		await message.reply('–ï–±–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ,–ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –ø—Ä–æ–π–¥—è—Ç —Ç–≤–æ—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ —Å –±–∞—Å—Å–µ–∏–Ω–æ–º(–∏–ª–∏ –±–µ–∑:) –∏ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞ –º—É—á–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É',reply_markup=all_btn)
		await CreateHata.next()
	else:
		await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑!')
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return
@dp.message_handler(state=CreateHata.data)
async def create_hata_data(message: types.Message, state: FSMContext):
	if message.text == '–°–µ–≥–æ–¥–Ω—è' or message.text == '–ó–∞–≤—Ç—Ä–∞' or message.text == '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞':
		await state.update_data(hata_data=message.text)
		#user_data = await state.get_data()
		#db.create_hata(message.from_user.id,str(user_data['hata_description']),str(user_data['hata_name']),str(user_data['hata_data']))
		await message.reply('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ,–æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –ø–æ–Ω—è—Ç—å –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–≤–æ—ë —á—É–¥–Ω–æ–µ –º–µ—Å—Ç–æ\n–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–≤–æ–π –í–ø–∏—Å–∫–∞ –•–∞—É—Å =)')
		#await state.finish()
		await CreateHata.next()
	else:
		await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑!')
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return
@dp.message_handler(state=CreateHata.city)
async def create_hata_city(message: types.Message, state: FSMContext):
	if len(message.text) < 35:
		await state.update_data(hata_city=message.text.lower())
		user_data = await state.get_data()
		await message.answer('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
		db.create_hata(message.from_user.id,str(user_data['hata_description']),str(user_data['hata_name']),str(user_data['hata_data']),str(user_data['hata_city']))
		await state.finish()
	else:
		await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑!')
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return
@dp.message_handler(lambda message : message.text == '–£–¥–∞–ª–∏—Ç—å —Ö–∞—Ç—É‚ùå')
async def delete_hata(message: types.Message):
	db.delete_hata(message.from_user.id)
	await message.answer('–í–∞—à–∞ —Ö–∞—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!')


#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–º –∑–∞–ø—Ä–æ—Å–µ —é–∑–µ—Ä–∞
@dp.message_handler()
async def end(message : types.Message):
	await message.answer('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å üò≤\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /help =)',parse_mode=ParseMode.MARKDOWN)


#–∑–∞–ø—É—Å–∫ –ø–æ–ª–∏–Ω–≥–∞ –±–æ—Ç–∞		
executor.start_polling(dp, skip_updates=True)
